* 다익스트라 알고리즘
 - "한 노드에서 시작하여, 다른 모든 노드까지의 최단거리 계산"
 - 음이 아닌 가중치 그래프
 - 다익스트라 시간 복잡도: O(E log_2 V)

 !!! 다익스트라는 코드 변형(응용)이 거의 없으므로, 코드 암기 할 것
     => 중요한 것은 해당 문제가 다익스트라 문제인지 알아내는 것
     => "한 노드에서 시작하여, 다른 모든 노드까지의 최단거리"


* 자료구조
1) 최단거리 배열: int[] dist
  - 시작 노드 -> 모든 노드까지의 각 최단거리
  - 초기값: 시작 노드의 거리는 0, 나머지는 INF(무한대)로 초기화
    => Arrays.fill(dist, INF);  dist[startV] = 0;
    => 단, 예외적으로 노드 본인 -> 본인으로 돌아오는 싸이클 구성 확인하려면, dist[startV] = INF 로 초기화
    => INF 값 = (노드 V 최대 개수) x (각 간선의 가중치 최대값) or
                (간선 E 최대 개수) x (각 간선의 가중치 최대값)

2) 인접 리스트: ArrayList<Node>[] lists
  - 간선 Node (연결된 다음 노드 v, 거리 w) 저장
    => lists[1]: 1번 노드와 연결된 각 노드들 번호와 거리

3) 힙: PriorityQueue<Node> pq
  - Node 로 (도착 노드 v, 시작 -> 도착 노드의 거리 w) 저장
  - 초기: 시작 지점 추가
    => (시작 노드, 0)
  - 아직 방문 안한 노드 중에서,
    시작 노드와의 거리 dist[v] 값이 가장 작은 노드를 선택
    => 해당 노드 v 와 연결된 노드들의 거리 값 갱신

힙에서 현재 노드를 꺼내면서
해당 노드를 경유하여 갈때 이동거리가 더 짧은 경우,
최단거리 갱신 및 힙에 추가


* 핵심 코드
Arrays.fill(dist, INF);
dist[k] = 0;                            // 시작 노드: k
pq.add(new Node(k, 0));

while (!pq.isEmpty()) {
    // 시작 노드에서부터 가장 가까운 노드
    Node current = pq.remove();         // Node: 도착 노드 v, 시작 -> 도착 노드 거리 w

    if (dist[current.v] < current.w)    // 최단거리가 아닌 경우, 이미 갱신된 경우는 제외
        continue;

    for (Node next : lists[current.v]) {
        // current.v 노드와 연결된 다음 (노드 nv, 거리 nw)
        int nv = n.v;
        int nw = n.w;

        // dist[next.v]: 시작 노드 -> 도착 노드 next 현재까지 최단거리 (갱신 O or X 가능)
        // dist[current.v] + next.w: 시작 노드 -> 노드 v -> 노드 next 거리
        if (dist[next.v] > dist[current.v] + next.w) {  // 노드 v 를 경유해서 노드 next 를 갈 때, 거리가 더 짧은 경우
            dist[next.v] = dist[current.v] + next.w;    // 노드 next 의 최단거리 갱신
            pq.add(new Node(next.v, dist[next.v]));
        }
    }
}